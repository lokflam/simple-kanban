// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: kanban.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteCard = `-- name: DeleteCard :exec
DELETE FROM
    cards
WHERE
    id = $1
`

func (q *Queries) DeleteCard(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCard, id)
	return err
}

const getCard = `-- name: GetCard :one
SELECT
    id, title, content, status_id, created_at, updated_at
FROM
    cards
WHERE
    id = $1
`

func (q *Queries) GetCard(ctx context.Context, id uuid.UUID) (Card, error) {
	row := q.db.QueryRow(ctx, getCard, id)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.StatusID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCards = `-- name: ListCards :many
SELECT
    id, title, content, status_id, created_at, updated_at
FROM
    cards
`

func (q *Queries) ListCards(ctx context.Context) ([]Card, error) {
	rows, err := q.db.Query(ctx, listCards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Card
	for rows.Next() {
		var i Card
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.StatusID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertCard = `-- name: UpsertCard :exec
INSERT INTO
    cards (id, title, content, status_id, created_at, updated_at)
VALUES
    ($1, $2, $3, '018dbc48-4899-7aac-a1fa-0680a50c82a9', $4, $5)
ON CONFLICT (id)
DO UPDATE
    SET
        title = $2,
        content = $3,
        updated_at = $5
`

type UpsertCardParams struct {
	ID        uuid.UUID
	Title     string
	Content   string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) UpsertCard(ctx context.Context, arg UpsertCardParams) error {
	_, err := q.db.Exec(ctx, upsertCard,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
